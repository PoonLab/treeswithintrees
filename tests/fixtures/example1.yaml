# As the user, I want to specify a transmission tree with sampling times, transmission times and direction of transmission events (who infected whom):
# Example Newick Tree:
# ((C:1,B:1)B:2,A:3)A:1;
# Internal node labels specify who infected whom, and branch lengths indicate the timing of transmission events and host sampling
CompartmentTypes:
  'host':
    unsampled: 20
    susceptible: 1000
    branching.rates: (host=0.2)     # only one CompartmentType, in this case represents transmission rates
    migration.rates: ()             # assume no migration
    bottleneck.size: 1              # bottleneck size when transmission event occurs
    popn.growth.dynamics:
      piece1:
        - start: 0
        - end: 0.75
        - intercept: 1              # at t=0, popn starts at the bottleneck size
        - slope: 15
      piece2:
        - start: 0.75
        - end: 1.5
        - intercept: -15
        - slope: 41
      piece3:
        - start: 1.5
        - end: 2.25
        - intercept: 90
        - slope: -30
      piece4:
        - start: 2.25
        - end: inf
        - intercept: 30
        - slope: -2
  # option to have more than one host type with different parameters
LineageType:
  'virus':
    # no parameters for now -- this class would allow for heterogeneity in transmission dynamics among pathogens
Compartments:
  'A':                              # label is linked to Newick tree tip label
    type: host                      # reference to CompartmentType object
    source: undefined               # A is the root
    branching.time: undefined
    replicates: 1                   # would be used for replication of generic object (80 hosts of type 1)
  'B':
    type: host
    source: A
    branching.time: 3.0             # note this is reverse time, cumulative
    replicates: 1
  'C': 
    type: host
    source: B
    branching.time: 1.0
    replicates: 1
Lineages:
  '1': 
    type: virus
    sampling.time: (0.0, 2.0, 3.0)  # could either be a single sampling time, or a vector of multiple, where we will then create distinct Lineages
    location: A                     # at sampling, will change as we go back in time
    replicates: 3
  '2': 
    type: virus
    sampling.time: 0.0
    location: B
    replicates: 1
  '3': 
    type: virus
    sampling.time: 0.0
    location: C
    replicates: 1

